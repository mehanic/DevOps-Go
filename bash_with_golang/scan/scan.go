package main

import (
	"bufio"
	"fmt"
	"net"
	"os"
	"os/signal"
	"strconv"
	"strings"
	"sync"
	"syscall"
	"time"
)

const (
	TC           = 5 // Number of threads
	connectTimeout = 2 * time.Second
)

var PORTS = []int{
	80, 23, 443, 21, 22, 25, 3389, 110, 445, 139, 143, 53, 135, 3306,
	8080, 1723, 111, 995, 993, 5900, 1025, 587, 8888, 199, 1720, 465,
	548, 113, 81, 6001, 10000, 514, 5060, 179, 1026, 2000, 8443, 8000,
	32768, 554, 26, 1433, 49152, 2001, 515, 8008, 49154, 1027, 5666, 646,
	5000, 5631, 631, 49153, 8081, 2049, 88, 79, 5800, 106, 2121, 1110,
	49155, 6000, 513, 990, 5357, 427, 49156, 543, 544, 5101, 144, 7, 389,
	8009, 3128, 444, 9999, 5009, 7070, 5190, 3000, 5432, 1900, 3986, 13,
	1029, 9, 5051, 6646, 49157, 1028, 873, 1755, 2717, 4899, 9100, 119,
	37, 1000, 3001, 5001, 82, 10010, 1030, 9090, 2107, 1024, 2103, 6004,
	1801, 5050, 19, 8031, 1041, 255, 1048, 1049, 1053, 1054, 1056, 1064,
	1065, 2967, 3703, 17, 808, 3689, 1031, 1044, 1071, 5901, 100, 9102,
	1039, 2869, 4001, 5120, 8010, 9000, 2105, 636, 1038, 2601, 1, 7000,
	1066, 1069, 625, 311, 280, 254, 4000, 1761, 5003, 2002, 1998, 2005,
	1032, 1050, 6112, 3690, 1521, 2161, 1080, 6002, 2401, 4045, 902, 787,
	7937, 1058, 2383, 32771, 1033, 1040, 1059, 50000, 5555, 10001, 1494,
	2301, 3, 593, 3268, 7938, 1022, 1234, 1035, 1036, 1037, 1074, 8002,
	9001, 464, 1935, 2003, 497, 6666, 6543, 1352, 24, 3269, 1111, 407,
	500, 20, 2006, 1034, 1218, 15000, 3260, 4444, 264, 2004, 33, 1042,
	42510, 3052, 999, 1023, 1068, 222, 7100, 888, 563, 1717, 2008, 32770,
	992, 32772, 7001, 2007, 8082, 5550, 1043, 2009, 512, 5801, 1700,
	2701, 50001, 7019, 4662, 2065, 2010, 42, 161, 2602, 3333, 9535, 5100,
	2604, 4002, 5002, 1047, 1051, 1052, 1055, 1060, 1062, 1311, 16992,
	16993, 20828, 23502, 2702, 32769, 3283, 33354, 35500, 4443, 5225,
	5226, 52869, 55555, 55600, 6059, 64623, 64680, 65000, 65389, 6789,
	8089, 8192, 8193, 8194, 8651, 8652, 8701, 9415, 9593, 9594, 9595,
	1067, 13782, 366, 5902, 9050, 1002, 5500, 85, 10243, 1863, 1864,
	45100, 49999, 51103, 5431, 8085, 49, 6667, 90, 1503, 27000, 6881,
	1500, 340, 8021, 2222, 5566, 8088, 8899, 9071, 1501, 32773, 32774,
	5102, 6005, 9101, 9876, 163, 5679, 146, 1666, 648, 901, 83, 14238,
	3476, 5004, 5214, 8001, 8083, 8084, 9207, 12345, 30, 912, 2030, 2605,
	6, 541, 1248, 3005, 4, 8007, 2500, 306, 880, 1086, 1088, 1097, 2525,
	4242, 52822, 8291, 9009, 6101, 900, 2809, 7200, 1083, 12000, 211,
	32775, 800, 987, 705, 20005, 711, 13783, 6969, 10002, 10012, 10024,
	10025, 1045, 1046, 10566, 1057, 1061, 10616, 10617, 10621, 10626,
	10628, 10629, 1063, 1070, 1072, 1073, 1075, 1077, 1078, 1079, 1081,
	1082, 1085, 1093, 1094, 1096, 1098, 1099, 1100, 1104, 1106, 1107,
	1108, 11110, 1148, 1169, 11967, 1272, 1310, 13456, 14000, 14442,
	15002, 15003, 15660, 16001, 16016, 16018, 1687, 1718, 1783, 17988,
	1840, 19101, 1947, 19801, 19842, 20000, 20031, 20221, 20222, 2100,
	2119, 2135, 2144, 21571, 2160, 2190, 2260, 22939, 2381, 2399, 24800,
	2492, 25734, 2607, 2718, 27715, 2811, 28201, 2875, 30000, 3017, 3031,
	3071, 30718, 31038, 3211, 32781, 32782, 3300, 3301, 3323, 3325, 3351,
	3367, 33899, 3404, 34571, 34572, 34573, 3551, 3580, 3659, 3766, 3784,
	3801, 3827, 3998, 4003, 40193, 4126, 4129, 4449, 48080, 49158, 49159,
	49160, 50003, 50006, 50007, 50008, 50009, 50010, 50011, 50012, 50013,
	50014, 50015, 50016, 50017, 50018, 50019, 50020, 50021, 50022, 50023,
	50024, 50025, 50026, 50027, 50028, 50029, 50030, 50031, 50032, 50033,
	50034, 50035, 50036, 50037, 50038, 50039, 50040, 50041, 50042, 50043,
	50044, 50045, 50046, 50047, 50048, 50049, 50050, 50051, 50052, 50053,
	50054, 50055, 50056, 50057, 50058, 50059, 50060, 50061, 50062, 50063,
	50064, 50065, 50066, 50067, 50068, 50069, 50070, 50071, 50072, 50073,
	50074, 50075, 50076, 50077, 50078, 50079, 50080, 50081, 50082, 50083,
	50084, 50085, 50086, 50087, 50088, 50089, 50090, 50091, 50092, 50093,
	50094, 50095, 50096, 50097, 50098, 50099,
}

func main() {
	var wg sync.WaitGroup
	var ports []int

	// Handle keyboard interrupts to exit gracefully
	sigs := make(chan os.Signal, 1)
	signal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM)

	// Get target IP address from the user
	reader := bufio.NewReader(os.Stdin)
	fmt.Print("Enter the target IP address: ")
	ip, _ := reader.ReadString('\n')
	ip = strings.TrimSpace(ip)

	// Get custom ports from the user
	fmt.Print("Enter custom ports separated by comma (or press Enter to use default ports): ")
	customPorts, _ := reader.ReadString('\n')
	customPorts = strings.TrimSpace(customPorts)

	if customPorts == "" {
		ports = PORTS
	} else {
		for _, p := range strings.Split(customPorts, ",") {
			port, err := strconv.Atoi(strings.TrimSpace(p))
			if err == nil {
				ports = append(ports, port)
			} else {
				fmt.Printf("Ignoring invalid port: %s\n", p)
			}
		}
	}

	// Set a limit on the number of threads
	sem := make(chan struct{}, TC)

	for _, port := range ports {
		wg.Add(1)
		sem <- struct{}{} // Acquire a token

		go func(port int) {
			defer wg.Done()
			defer func() { <-sem }() // Release the token

			address := fmt.Sprintf("%s:%d", ip, port)
			conn, err := net.DialTimeout("tcp", address, connectTimeout)
			if err != nil {
				// Connection failed, the port is closed
				return
			}
			defer conn.Close()
			fmt.Printf("Port %d is open\n", port)
		}(port)
	}

	// Wait for all goroutines to finish or exit on interrupt
	go func() {
		<-sigs
		fmt.Println("\nExiting...")
		os.Exit(0)
	}()

	wg.Wait()
}

