// Изучаем Golang. Урок 1. Основы + веб-сервер в 3 строки в конце урока!

package main

import "fmt"

func main() {
	fmt.Println("# Целочисленные типы:")
	var a int8 = -1   //представляет целое число от -128 до 127 и занимает в памяти 1 байт (8 бит)
	var b int16 = -4  //представляет целое число от -32768 до 32767 и занимает в памяти 2 байта (16 бит)
	var c int32 = -6  //представляет целое число от -2147483648 до 2147483647 и занимает 4 байта (32 бита)
	var d int64 = -9  //представляет целое число от –9 223 372 036 854 775 808 до 9 223 372 036 854 775 807 и занимает 8 байт (64 бита)
	var e uint8 = 2   //представляет целое число от 0 до 255 и занимает 1 байт
	var f uint16 = 5  //представляет целое число от 0 до 65535 и занимает 2 байта
	var g uint32 = 8  //представляет целое число от 0 до 4294967295 и занимает 4 байта
	var h uint64 = 10 //представляет целое число от 0 до 18 446 744 073 709 551 615 и занимает 8 байт
	var i byte = 3    //синоним типа uint8, представляет целое число от 0 до 255 и занимает 1 байт
	var j rune = -7   //синоним типа int32, представляет целое число от -2147483648 до 2147483647 и занимает 4 байта
	var k int = 102   //представляет целое число со знаком, которое в зависимости о платформы может занимать либо 4 байта, либо 8 байт. То есть соответствовать либо int32, либо int64.
	var m uint = 105  //представляет целое беззнаковое число только без знака, которое, аналогично типу int, в зависимости о платформы может занимать либо 4 байта, либо 8 байт. То есть соответствовать либо uint32, либо uint64.
	fmt.Println("var a int8 = ", a)
	fmt.Println("var b int16 = ", b)
	fmt.Println("var c int32 = ", c)
	fmt.Println("var d int64 = ", d)
	fmt.Println("var e uint8 = ", e)
	fmt.Println("var f uint16 = ", f)
	fmt.Println("var g uint32 = ", g)
	fmt.Println("var h uint64 = ", h)
	fmt.Println("var i byte = ", i)
	fmt.Println("var j rune = ", j)
	fmt.Println("var k int = ", k)
	fmt.Println("var m uint = ", m)
	fmt.Println("# Числа с плавающей точкой:")
	var f1 float32 = 18 //представляет число с плавающей точкой от 1.4*10-45 до 3.4*1038(для положительных). Занимает в памяти 4 байта (32 бита)
	var g1 float32 = 4.5
	var d1 float64 = 0.23 //представляет число с плавающей точкой от 4.9*10-324 до 1.8*10308 (для положительных) и занимает 8 байт.
	var pi float64 = 3.14
	var e1 float64 = 2.7
	fmt.Println("var f float32 = ", f1)
	fmt.Println("var g float32 = ", g1)
	fmt.Println("var d float64 = ", d1)
	fmt.Println("var pi float64 = ", pi)
	fmt.Println("var e float64 = ", e1)
	fmt.Println("# Комплексные числа:")
	var f2 complex64 = 1 + 2i  //комплексное число, где вещественная и мнимая части представляют числа float32
	var g2 complex128 = 4 + 3i //комплексное число, где вещественная и мнимая части представляют числа float64
	fmt.Println("var f2 complex64 = ", f2)
	fmt.Println("var g2 complex128 = ", g2)
	fmt.Println("# Тип bool:")
	var isAlive bool = true    //Логический тип или тип bool может иметь одно из двух значений: true (истина) или false (ложь)
	var isEnabled bool = false //Логический тип или тип bool может иметь одно из двух значений: true (истина) или false (ложь)
	fmt.Println("var isAlive bool = ", isAlive)
	fmt.Println("var isEnabled bool = ", isEnabled)
	fmt.Println("# Строки:")
	var name string = "Том Сойер" //Строки представлены типом string. В Go строке соответствует строковый литерал - последовательность символов, заключенная в двойные кавычки
	fmt.Println("var name string = ", name)
	fmt.Println("# Неявная типизация:")
	//При определении переменной мы можем опускать тип в том случае, если мы явно инициализируем переменную каким-нибудь значением:
	//var name = "Tom"
	//
	//В этом случае компилятор на основании значения неявно выводит тип переменной. Если присваивается строка, то то соответственно переменная будет представлять тип string, если присваивается целое число, то переменная представляет тип int и т.д.
	//
	//То же самое по сути происходит при кратком определении переменной, когда также явным образом не указывается тип данных:
	//name := "Tom"
	//
	//При этом стоит учитывать, что если мы не указываем у переменной тип, то ей обязательно надо присвоить некоторое начальное значение. Объявление переменной одновременно без указания типа данных и начального значения будет ошибкой:
	//var name    // ! Ошибка
	//
	//Надо либо указать тип данных (в этом случае переменная будет иметь значение по умолчанию):
	//var name string
	//
	//Либо указать начальное значение, на основании которого выводится тип данных:
	//var name = "Tom"
	//
	//Либо и то, и другое одновременно:
	//var name string = "Tom"
	//
	//Неявная типизация нескольких переменных:
	//var (
	//	name = "Tom"
	//	age = 27
	//)
	//
	//или так:
	var name1, age = "Dmitrii", 45
	fmt.Println(fmt.Sprintf("My name is %s. And i'm %d years old", name1, age))

}

// └> $ go run /home/mehanic/structure/data_types/Lesson_1/app.go
// # Целочисленные типы:
// var a int8 =  -1
// var b int16 =  -4
// var c int32 =  -6
// var d int64 =  -9
// var e uint8 =  2
// var f uint16 =  5
// var g uint32 =  8
// var h uint64 =  10
// var i byte =  3
// var j rune =  -7
// var k int =  102
// var m uint =  105
// # Числа с плавающей точкой:
// var f float32 =  18
// var g float32 =  4.5
// var d float64 =  0.23
// var pi float64 =  3.14
// var e float64 =  2.7
// # Комплексные числа:
// var f2 complex64 =  (1+2i)
// var g2 complex128 =  (4+3i)
// # Тип bool:
// var isAlive bool =  true
// var isEnabled bool =  false
// # Строки:
// var name string =  Том Сойер
// # Неявная типизация:
// My name is Dmitrii. And i'm 45 years old
